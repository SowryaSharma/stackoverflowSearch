{"version":3,"sources":["Navbar.js","Display.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","searchUrl","query","console","log","type","value","onClick","window","open","id","Display","isLoading","className","error","values","length","map","item","href","link","title","owner","rel","src","profile_image","alt","display_name","Date","creation_date","getDate","getMonth","getFullYear","last_activity_date","answer_count","App","useState","setQuery","getState","setGetState","question","setQuestion","loading","setLoading","setError","sorting","setSorting","url","fetchAndLog","a","fetch","then","res","json","data","items","catch","err","useEffect","placeholder","onChange","event","target","htmlFor","defaultValue","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2eb62577.chunk.js","sourcesContent":["import \"./Navbar.css\";\r\n\r\nexport function Navbar(props){\r\n    const searchUrl=`https://duckduckgo.com/?q=${props.query}`;\r\n    console.log(searchUrl)\r\n   function handleSearch(){\r\n    window.open(searchUrl,'_blank');\r\n   }\r\n    return <><input type=\"button\" value=\"could not find question?\" onClick={handleSearch} id=\"searchButton\"></input></>\r\n}","import \"./display.css\";\r\nimport {Navbar} from \"./Navbar\";\r\n\r\n\r\nexport function Display(props){\r\n   if(props.isLoading){\r\n       return <div className=\"loader\"></div>\r\n    }\r\n   else if(props.error){\r\n       return <div id=\"error\">Something went wrong :(</div>\r\n   }\r\n   else if((props.values).length!==0){\r\n    return <div id=\"display\">\r\n\r\n    {props.values.map(item => (\r\n        <div id=\"item\">\r\n       <a href={item.link}>\r\n    <div id=\"title\">\r\n        <b>{item.title}</b>\r\n      </div>\r\n      <div id=\"user\">by <a href={item.owner.link} rel='noreferrer'><img src={item.owner.profile_image} alt=\"\"/> {item.owner.display_name}</a></div>\r\n      <div id=\"flex-container\">\r\n      <div id=\"asked\">asked on {new Date(item.creation_date*1000).getDate()}-{new Date(item.creation_date*1000).getMonth()}-{new Date(item.creation_date*1000).getFullYear()}</div>\r\n      <div id=\"active\">Last activity date {new Date(item.last_activity_date*1000).getDate()}-{new Date(item.last_activity_date*1000).getMonth()}-{new Date(item.last_activity_date*1000).getFullYear()}</div>\r\n      <div id=\"answer_count\">{item.answer_count} Answers</div></div>\r\n      </a>\r\n      </div>\r\n    ))}\r\n  <Navbar query={props.query}/>\r\n  </div>\r\n   }\r\n   return<div className=\"no-result\">Could not find any results<Navbar query={props.query}/> </div>\r\n\r\n\r\n\r\n}\r\n","import { useState, useEffect } from 'react';\nimport {Display} from \"./Display\";\nimport \"./App.css\";\n\n\n\nfunction App() {\n  const [query,setQuery]=useState(\"\");\n  const [getState, setGetState] = useState('');\n  const [question,setQuestion]=useState([]);\n  const [loading,setLoading]=useState(true);\n  const [error,setError]=useState(false);\n  const [sorting,setSorting]=useState(\"activity\")\n  // const [result,setResult]=useState(false);\n  const url=`https://api.stackexchange.com/2.3/search/advanced?order=desc&sort=${sorting}&title=${query}&site=stackoverflow`;\n const fetchAndLog = async () => {\n   setLoading(true)\n    fetch(url) \n    .then((res) => res.json())\n    .then((data) => setQuestion(data.items))\n    .then(setLoading(false))\n    .catch((err)=>setError(true))\n\n}\nconst inputHandler = (event) => {\n  setGetState(event.target.value);\n};\n\nconst submitHandler = () => {\n  setQuery(getState);\n};\n\nconst handleChange=(e)=>{\n  setSorting( e.target.value);\n  console.log(sorting);\n}\n\n\n  useEffect(()=>{fetchAndLog()},[url]);\n  return <>\n          <div id=\"flex-container-top\">\n          <div className=\"Logo\"> Stackoverflow query search</div>\n          <div className=\"searchForm\">\n            <input\n              type=\"text\"\n              id=\"search-bar\"\n              placeholder='search your query'\n              onChange={inputHandler}\n              value={getState}\n            />\n          <button className=\"search-btn\" onClick={submitHandler} value=\"search\">\n          <div className=\"search icon\"></div>\n          </button></div>\n          <div id=\"sort_by\">\n          <label htmlFor=\"sort\">Sort by : </label>\n          <select defaultValue={sorting} onChange={handleChange} id=\"sort\">\n            <option value=\"activity\">Activity</option>\n            <option value=\"relevance\">Relevance</option>\n            <option value=\"votes\">Votes</option>\n            <option value=\"creation\">Creation</option>\n          </select>\n          </div>   \n          \n          \n          </div>\n\n        <Display values={question} error={error} isLoading={loading} query={query}/>\n  \n\n  </>\n  }\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}